#creates dictionary to store values
mobius_values:=NewDictionary(1,true);

#creates a key to access all the groups which are in the dictionary
keys:=[];

#checks whether or not G is isomorphic to a group in our dictionary 
check_isomorphism:=function(G)
	local i;
	for i in keys do
		if Size(i)=Size(G) then
			if IsomorphismGroups(i,G)=fail then
				continue;
			else
				return [1,G];
			fi;
		fi;
	od;
	return [0,0];
end;;

hi:=function(dict)
local i,list;
list:=[];
for i in dict do
	Add(list,i);
od;
return list;
end;

#computes the conjugacy classes of G
c:=function(n,G)
	local cc;
  cc:=ConjugacyClassesSubgroups(G);
  return ConjugateSubgroups(G,Representative(cc[n]));
end;;
  
#computes the subgroups of G
sub:=function(G)
  local list,i,cc;
  list:=[ ];
  i:=1;
  cc:=Size(ConjugacyClassesSubgroups(G));
  while i<cc do
    Append(list, c(i,G));
    i:=i+1;
  od;
  return list;
end;;
		
#computes the mobius function of G recursively
mobius:=function(G)
  local subG,i,iso;
  subG:=sub(G);
	iso:=check_isomorphism(G);
  if Size(G)=1 then
    return 1;
	elif iso[1]=1 then
		return LookupDictionary(mobius_values,iso[2]); 
  else
    i:=-1*(Sum(List(subG,mobius)));
    AddDictionary(mobius_values,G,i);
		Add(keys,G);
    return i;
  fi;
end;;


	

  
