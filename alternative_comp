mobius_values:=NewDictionary(1,true);
#computes the conjugacy classes of G
c:=function(n,G)
	local cc;
	cc:=ConjugacyClassesSubgroups(G);
	return ConjugateSubgroups(G,Representative(cc[n]));
end;;
  
#computes the subgroups of G
sub:=function(G)
	local list,i,cc;
	list:=[ ];
	i:=1;
	cc:=Size(ConjugacyClassesSubgroups(G));
	while i<cc do
		Append(list, c(i,G));
		i:=i+1;
	od;
	return list;
end;;
		
#computes the mobius function of G recursively
mobius:=function(G)
  local subG;
  subG:=sub(G);
  #base case
  if Size(G)=0 then
    return 0;
  #second case
  elif Size(G)=1 then
    return 1;
  elif KnowsDictionary(mobius_values,G)=true then
    return LookupDictionary(mobius_values,G);
  else
    return -1*(Sum(List(subG,mobius)));
  fi;
end;;

cc_sub:=function(G)
	local cc,list,i;
	cc:=ShallowCopy(ConjugacyClassesSubgroups(G));
	Remove(cc);
	list:=[];
	for i in cc do
		Add(list,Representative(i));
	od;
	return list;
end;;

mobius_conj:=function(G)
	local cc;
	cc:=cc_sub(G);
	if Size(G)=0 then
		return 0;
	elif Size(G)=1 then
		return 1;
	else
		return -1*(Sum(List(cc,mobius_conj)));
	fi;
end;;
	

  
