#c computes conjugacy classes of subgroups
c:=function(n,G)
	local cc;
	cc:=ConjugacyClassesSubgroups(G);
	return ConjugateSubgroups(G,Representative(cc[n]));
	end;;

#computes whether a subgroup H is in K
H_in_K:=function(H,K)
	if IsSubgroup(K,H)=true then
		return 1;
	else
		return 0;
	fi;
end;;

#computes subgroups of G	
sub:=function(G)
	local list,i,cc;
	list:=[ ];
	i:=1;
	cc:=Size(ConjugacyClassesSubgroups(G));
	while i<=cc do
		Append(list, c(i,G));
		i:=i+1;
	od;
	return list;
end;;

#finds subgroups of G from X to G(ie subgroups H of G such that X is a subgroup of H)
sub_XG:=function(X,G)
	local subG,i,list;
	subG:=sub(G);
	list:=[];
	for i in subG do
		if IsSubgroup(i,X)=true then
			Add(list, i);
		fi;
  od;
	return list;
end;;

#computes the rows of the zeta function matrix for subgroups
row_sub:=function(i,G,sub_g)
	local list,j;
	list:=[ ];
	for j in sub_g do
		Add(list,H_in_K(sub_g[i],j));
	od;
	return list;
end;;

#puts these together to create the zeta matrix
zeta_sub:=function(X,G)
	local i, zeta_mat,size_sub,sub_g;
	sub_g:=sub_XG(X,G);
	size_sub:=Size(sub_g);
	zeta_mat:=[ ];
	i:=1;
	while i<=size_sub do
		Add(zeta_mat,row_sub(i,G,sub_g));
		i:=i+1;
	od;
	return zeta_mat;
end;;

#takes inverse to compute mobius function of subgroups from X to G
mobius_sub:=function(X,G)
	local s,mobius_mat;
	s:=Size(sub_XG(X,G));
	mobius_mat:=Inverse(zeta_sub(X,G));
	return (mobius_mat[1])[s];
end;;

product:=function(X,Y)
	local x,y,list;
	list:=[];
	for x in X do
		for y in Y do
			Add(list, x*y);
		od;
	od;
	return Set(list);
end;;

#finds a set of X such that for some normal subgroup N of G XN=G
findX:=function(N,G)
	local list,subG,X;
	list:=[];
	subG:=sub(G);
	for X in subG do
		if product(X,N)=G then
			Add(list,X);
		fi;
	od;
	return Set(list);
end;;

#computes m_{G,N}
m:=function(N,G)
	local s,Xset,sum,X;
	s:=1/Size(G);
	Xset:=findX(N,G);
	sum:=0;
	for X in Xset do
		sum:=sum+s*Size(X)*mobius_sub(X,G);
	od;
	return sum;
end;;

#generates non-trivial normal subgroups, probably an easier way to do this
non_trivial_norm_sub:=function(G)
	local N,N_sub,list;
	N_sub:=NormalSubgroups(G);
	list:=[];
	for N in N_sub do
		if Size(N)>1 then
			Add(list,N);
		fi;
	od;
	return list;
end;;

#checks whether a group is a b-group
is_b_group:=function(G)
	local N_sub,N;
	N_sub:=non_trivial_norm_sub(G);
	for N in N_sub do
		if m(N,G)=0 then
			return true;
		fi;
	od;
	return false;
end;;
			
			
	
	
